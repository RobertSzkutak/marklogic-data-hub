plugins {
    id 'net.saliman.properties' version '1.4.6'
    id 'java'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.7.2'
    id 'com.marklogic.ml-gradle' version '2.5.0'
    id 'com.moowork.node' version '1.1.1'
}

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'https://developer.marklogic.com/maven2/' }
}

group = 'com.marklogic'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'org.springframework.batch:spring-batch-core:3.0.6.RELEASE'
    compile 'org.springframework:spring-jdbc:4.2.6.RELEASE'
    compile 'com.marklogic:java-client-api:3.0.5'
    compile 'com.marklogic:ml-javaclient-util:2.12.1'
    compile 'com.marklogic:ml-app-deployer:2.5.0'
    compile 'com.marklogic:marklogic-spring-batch-core:0.7.0'
    compile 'commons-io:commons-io:2.4'
    testCompile 'org.springframework.batch:spring-batch-test:3.0.6.RELEASE'
    testCompile 'junit:junit:4.12'
    testCompile 'xmlunit:xmlunit:1.3'
    testCompile 'org.skyscreamer:jsonassert:1.3.0'
    testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testCompile 'org.easymock:easymock:3.4'
}

node {
  // Version of node to use.
  version = '7.5.0'

  // Version of npm to use.
  npmVersion = '4.1.2'

  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}/src/trace-ui")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task cleanUI(type: Delete) {
  delete 'src/main/resources/ml-modules/root/trace-ui'
}

task npmInstallUI(type: NpmTask) {
    args = ['install']
    dependsOn tasks.cleanUI
}

task buildUI(type: NpmTask) {
    args = ['run', 'build.prod']
    dependsOn tasks.npmInstallUI
}

task copyUIAssets(type: Copy) {
    from 'src/trace-ui/dist'
    into 'src/main/resources/ml-modules/root/trace-ui'
    dependsOn tasks.buildUI
}

processResources {
    filesMatching("**/version.properties") {
        expand(project: project)
    }
}

if (!gradle.startParameter.taskNames.contains('bootrun')) {
  processResources.dependsOn copyUIAssets
}

javadoc {
   options.overview = 'src/main/resources/overview.html'
}

Node pomCustomizations = new NodeBuilder(). project {
    name 'marklogic-data-hub'
    packaging 'jar'
    textdescription 'Library for Creating an Enterprise Data Hub on MarkLogic'
    url 'https://github.com/marklogic/marklogic-data-hub'

    scm {
        url 'git@github.com:marklogic/marklogic-data-hub.git'
        connection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
        developerConnection 'scm:git@github.com:marklogic/marklogic-data-hub.git'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            name 'MarkLogic'
            email 'java-sig@marklogic.com'
            organization 'MarkLogic'
            organizationUrl 'https://www.marklogic.com'
        }
        developer {
            name 'MarkLogic Github Contributors'
            email 'general@developer.marklogic.com'
            organization 'Github Contributors'
            organizationUrl 'https://github.com/marklogic/marklogic-data-hub/graphs/contributors'
        }
    }
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('description', pomCustomizations.textdescription.text())
                asNode().append(pomCustomizations.developers)
                asNode().append(pomCustomizations.name)
                asNode().append(pomCustomizations.packaging)
                asNode().append(pomCustomizations.url)
                asNode().append(pomCustomizations.scm)
                asNode().append(pomCustomizations.licenses)
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['main']
    pkg {
        repo = 'maven'
        name = project.name
        desc = pomCustomizations.textdescription.text()
        licenses = ['Apache-2.0']
        websiteUrl = pomCustomizations.url
        vcsUrl = pomCustomizations.scm.url
        issueTrackerUrl = 'https://github.com/marklogic/marklogic-data-hub/issues'
    }
}

ext {
    // mlAppConfig is an instance of com.marklogic.appdeployer.AppConfig
    mlAppConfig {

        moduleTokensPropertiesSources = new ArrayList<>()

        // override some default values with our values
        modulesDatabaseName = mlModulesDbName
        triggersDatabaseName = mlTriggersDbName
        schemasDatabaseName = mlSchemasDbName
        restPort = Integer.parseInt(mlJobPort)

        // Configure custom tokens for our json files
        customTokens.put("%%mlStagingAppserverName%%", mlStagingAppserverName)
        customTokens.put("%%mlStagingPort%%", mlStagingPort)
        customTokens.put("%%mlStagingDbName%%", mlStagingDbName)

        customTokens.put("%%mlFinalAppserverName%%", mlFinalAppserverName)
        customTokens.put("%%mlFinalPort%%", mlFinalPort)
        customTokens.put("%%mlFinalDbName%%", mlFinalDbName)

        customTokens.put("%%mlTraceAppserverName%%", mlTraceAppserverName)
        customTokens.put("%%mlTracePort%%", mlTracePort)
        customTokens.put("%%mlTraceDbName%%", mlTraceDbName)

        customTokens.put("%%mlJobAppserverName%%", mlJobAppserverName)
        customTokens.put("%%mlJobPort%%", mlJobPort)
        customTokens.put("%%mlJobDbName%%", mlJobDbName)

        customTokens.put("%%mlModulesDbName%%", mlModulesDbName)
        customTokens.put("%%mlTriggersDbName%%", mlTriggersDbName)
        customTokens.put("%%mlSchemasDbName%%", mlSchemasDbName)

        modulePaths = ["marklogic-data-hub/src/main/resources/ml-modules"]
    }
}
